О программе: 

Данная модулируемая объектно-ориентированная система эмулирует поведение работы банковского аппарата
со всеми его основными функциями, настройками и возможностями. Предоставляет пользователю возможность
работы с базовыми операциями счета (пополнение, снятие, перевод, оплата) и работы с личным кабинетом.

Создать класс Money, содержащий в себе следующие элементы:
- поле «валюта»: string currency;
- поле «сумма»: long sum;
- поле «допустимый остаток на балансе»: long lim;
- метод получения валюты:  string getCurrency();
- метод получения суммы: long getSum();
- метод получения остатка: long getLim();
- метод изменения валюты: string getCurrency();
- метод изменения суммы: long getSum();
- метод изменения остатка: long getLim();
- конструктор с параметрами Money(string Currency, long Sum, long Lim);
Создать класс Account, содержащий в себе элементы:
- поле «ФИО»: string fio;
- поле «ID-аккаунта»: long id;
- поле «ПИН-Кода» : int pin;
- объект класса «Money»: Money m;
- метод «положить деньги на счет»: void AddMoney(long sum);
- метод «снять деньги со счета»: long SubMoney(long Sum); (-1 Если нет указанной суммы);
- метод получения ФИО: string getFIO();
- метод получения «ПИН-Кода»: long getPin();
- метод получения баланса: long getBal();
- метод получения типа валюты: string getCurr();
- метод получения лимита: long getLimit();
- метод изменения «ПИН-Кода»: void setPin(int Pin);
- метод изменения ФИО: void setFIO(string FIO);
- метод изменения типа валюты: void setCurr(string Curr);
- метод изменения типа лимита: void setLimit(long Limit);
- конструктор с параметрами Account(char * FIO, long Ident, Money m).
В классе Account перегрузить оператор ! (унарный, оператор класса), новое действие - обнулить счет.
